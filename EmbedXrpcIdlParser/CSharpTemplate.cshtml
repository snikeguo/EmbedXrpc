@using RazorEngine
@using System
@using System.Collections.Generic
@using EmbedXrpcIdlParser
@inherits RazorEngine.Templating.TemplateBase<CsCodeGenerater>
@{
    FileIdlInfo idlInfo = ((CsCodeGenerater)this.Model).CodeGenParameter.FileIdlInfo;
    GenType genType = ((CsCodeGenerater)this.Model).CodeGenParameter.GenType;
    //bool IsEnableMataDataEncode= ((CsCodeGenerater)this.Model).CodeGenParameter.IsEnableMataDataEncode;
}
<h1 using EmbedXrpc; />
<h1 using System; />
<h1 using System.Reflection; />
<h1 using System.Collections.Generic; />
@{
    foreach (var userNs in idlInfo.GenerationOption.UserNamespace)
    {
        <h1 using @userNs ; />
    }
}
<h1 // auto code gen ! DO NOT modify this file! create time @DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff") ; />
<h1 namespace @idlInfo.GenerationOption.CSharpNameSpace />
<h1 { />
@{
    var ens = idlInfo.TargetEnums;
    foreach (var enu in ens)
    {
        <h1 public enum @enu.Name :@enu.SourceCodeType />
        <h1 { />
        foreach (var ev in enu.TargetEnumValues)
        {

            <h1 @(ev.Description + "=") @(ev.Value + ",") />
        }

        <h1 } />
    }

    var structs = idlInfo.TargetStructs;
    foreach (var stru in structs)
    {
        if (stru.BitsAttribute != null)
        {
            <h1 [Bits( @("BitsType." + stru.BitsAttribute.BitsType.ToString() ) )] />
        }
        <h1 public class @stru.Name />
        <h1 { />
        foreach (var field in stru.TargetFields)
        {

            if (field.IsArray == true)
            {
                string v = "[ArrayProperty(LenFieldName = \"" + field.MaxCountAttribute.LenFieldName + "\")]";
                <h1 @v />
                var lenField = IdlInfo.GetArrayLenField(stru.TargetFields, field);
                int lenv = 0;
                if (lenField == null)
                {
                    lenv = 1;
                }
                <h1 [FieldNumber( @field.FieldNumberAttr.Number ) ] />
                <h1 public @field.SourceCodeType @(field.Name + "{get;set;}")=new @{ @field.SourceCodeElementType  } [ @lenv ]; />
            }
            else
            {
                if (field.BitsFieldLengthAttribute != null)
                {
                    <h1 [BitsFieldLength( @field.BitsFieldLengthAttribute.Length )] />
                }
                if (field.IsBaseValueType == true && field.BitsType == BitsType.NoBits)
                {
                    <h1 [FieldNumber( @field.FieldNumberAttr.Number ) ] />
                    <h1 [ArrayLenFieldFlag( @(field.IsArrayLenField.ToString().ToString().ToLower()) ) ] />
                    <h1 public @field.SourceCodeType @(field.Name + "{get;set;}") />
                }
                else
                {
                    <h1 [FieldNumber( @field.FieldNumberAttr.Number ) ] />
                    <h1 public @field.SourceCodeType @(field.Name + "{get;set;}")=new @{ @field.SourceCodeType  } (); />
                }
            }
        }
        <h1 } />
    }

    foreach (var del in idlInfo.TargetDelegates)
    {

        TargetStruct stru = del.ParameterStruct;
        <h1 public class @stru.Name />
        <h1 { />
        foreach (var field in stru.TargetFields)
        {
            if (field.IsArray == true)
            {
                string v = "[ArrayProperty(LenFieldName = \"" + field.MaxCountAttribute.LenFieldName + "\")]";
                <h1 @v />
                var lenField = IdlInfo.GetArrayLenField(stru.TargetFields, field);
                int lenv = 0;
                if (lenField == null)
                {
                    lenv = 1;
                }
                <h1 [FieldNumber( @field.FieldNumberAttr.Number ) ] />
                <h1 public @field.SourceCodeType @(field.Name + "{get;set;}")=new @{ @field.SourceCodeElementType  } [ @lenv ]; />
            }
            else
            {
                if (field.IsBaseValueType == true && field.BitsType == BitsType.NoBits)
                {
                    <h1 [FieldNumber( @field.FieldNumberAttr.Number ) ] />
                    <h1 [ArrayLenFieldFlag( @(field.IsArrayLenField.ToString().ToString().ToLower()) ) ] />
                    <h1 public @field.SourceCodeType @(field.Name + "{get;set;}") />
                }
                else
                {
                    <h1 [FieldNumber( @field.FieldNumberAttr.Number ) ] />
                    <h1 public @field.SourceCodeType @(field.Name + "{get;set;}")=new @{ @field.SourceCodeType  } (); />
                }
            }
        }
        <h1 } />
        if (genType == GenType.Client || genType == GenType.All)
        {
            string delattr = "[DelegateInfo(Name=\"" + del.MethodName + "\")]";
            <h1 @delattr />
            <h1 public partial class @(del.MethodName + "ClientImpl") :IDelegate />
            <h1 { />
            <h1 @("public static readonly UInt16 " + del.MethodName + "_ServiceId=" + del.ServiceId.ToString() + ";") />
            <h1 public override UInt16 GetSid(){ return @(del.MethodName + "_ServiceId") ; } />
            <h1 public override void Invoke(SerializationManager recManager) />
            <h1 { />
            string s = del.ParameterStruct.Name + " request = recManager.Deserialize <" + @del.ParameterStruct.Name + ">();";
            <h1 @s />
            string pars = string.Empty;
            string externstr = string.Empty;
            for (int pi = 0; pi < del.ParameterStruct.TargetFields.Count; pi++)
            {
                var par = del.ParameterStruct.TargetFields[pi];
                pars += "request." + par.Name;
                externstr += par.SourceCodeType + " " + par.Name;
                if (pi + 1 < del.ParameterStruct.TargetFields.Count)
                {
                    pars += ",";
                    externstr += ",";
                }

            }
            <h1 @(del.MethodName + "(" + pars + ");") />
            <h1 } />
            <h1 //public void @(del.MethodName + "(" + externstr + ");") />
            <h1 } />
        }

        if (genType == GenType.Server || genType == GenType.All)
        {
            <h1 public class @(del.MethodName + "Delegate") />
            <h1 { />
            <h1 private EmbedXrpcObject Server; />
            <h1 public @(del.MethodName + "Delegate(EmbedXrpcObject server)") />
            <h1 { Server=server; } />
            <h1 @("public static readonly UInt16 " + del.MethodName + "_ServiceId=" + del.ServiceId.ToString() + ";") />

            var pars = string.Empty;
            for (int pi = 0; pi < del.ParameterStruct.TargetFields.Count; pi++)
            {
                var par = del.ParameterStruct.TargetFields[pi];
                pars += par.SourceCodeType + " " + par.Name;
                if (pi + 1 < del.ParameterStruct.TargetFields.Count)
                {
                    pars += ",";
                }

            }
            <h1 public void Invoke( @(pars) ) />
            <h1 { />
            <h1 @(del.ParameterStruct.Name + " request")=new @(del.ParameterStruct.Name + "();") />
            for (int pi = 0; pi < del.ParameterStruct.TargetFields.Count; pi++)
            {
                var par = del.ParameterStruct.TargetFields[pi];
                string setvalue = "request." + par.Name + "=" + par.Name + ";";
                <h1 @setvalue />
            }
            string SerializationManager_Construction = "SerializationManager sm=new SerializationManager(Assembly.GetExecutingAssembly(),Server.IsEnableMataDataEncode,new List<byte>());";
            <h1 @SerializationManager_Construction />
            <h1 sm.Serialize(request,0); />
            string sendBytesString = "List<byte> sendBytes = new List<byte>();";
            <h1 @sendBytesString />

            string sid_temp = "(byte)(" + del.MethodName + "_ServiceId&0xff)";
            <h1 sendBytes.Add( @sid_temp ); />

            sid_temp = "(byte)(" + del.MethodName + "_ServiceId>>8&0xff)";
            <h1 sendBytes.Add( @sid_temp ); />

            sid_temp = "(byte)(Server.TimeOut>>0&0xff)";
            <h1 sendBytes.Add( @sid_temp ); />

            sid_temp = "(byte)(((Server.TimeOut>>8&0xff)&0x3F)|((byte)ReceiveType.Delegate)<<6)";
            <h1 sendBytes.Add( @sid_temp ); />

            <h1 sendBytes.AddRange(sm.Data); />
            <h1 Server.Send ( sendBytes.Count,0,sendBytes.ToArray() ); />
            <h1 } />
            <h1 } />
        }

    }

    var interfaces = idlInfo.TargetInterfaces;

    foreach (var interf in interfaces)
    {
        foreach (var service in interf.Services)
        {
            TargetStruct stru = service.ParameterStruct;
            <h1 public class @stru.Name />
            <h1 { />
            foreach (var field in stru.TargetFields)
            {
                if (field.IsArray == true)
                {
                    string v = "[ArrayProperty(LenFieldName = \"" + field.MaxCountAttribute.LenFieldName + "\")]";
                    <h1 @v />
                    var lenField = IdlInfo.GetArrayLenField(stru.TargetFields, field);
                    int lenv = 0;
                    if (lenField == null)
                    {
                        lenv = 1;
                    }
                    <h1 [FieldNumber( @field.FieldNumberAttr.Number ) ] />
                    <h1 public @field.SourceCodeType @(field.Name + "{get;set;}")=new @{ @field.SourceCodeElementType  } [ @lenv ]; />
                }
                else
                {
                    if (field.IsBaseValueType == true && field.BitsType == BitsType.NoBits)
                    {
                        <h1 [FieldNumber( @field.FieldNumberAttr.Number ) ] />
                        <h1 [ArrayLenFieldFlag( @(field.IsArrayLenField.ToString().ToString().ToLower()) ) ] />
                        <h1 public @field.SourceCodeType @(field.Name + "{get;set;}") />
                    }
                    else
                    {
                        <h1 [FieldNumber( @field.FieldNumberAttr.Number ) ] />
                        <h1 public @field.SourceCodeType @(field.Name + "{get;set;}")=new @{ @field.SourceCodeType  } (); />
                    }
                }
            }
            <h1 } />
            TargetStruct returnstru = service.ReturnStruct;
            <h1 public class @returnstru.Name />
            <h1 { />
            foreach (var field in returnstru.TargetFields)
            {
                if (field.IsBaseValueType == true && field.BitsType == BitsType.NoBits)
                {
                    <h1 [FieldNumber( @field.FieldNumberAttr.Number ) ] />
                    <h1 [ArrayLenFieldFlag( @(field.IsArrayLenField.ToString().ToString().ToLower()) ) ] />
                    <h1 public @field.SourceCodeType @(field.Name + "{get;set;}") />
                }
                else
                {
                    <h1 [FieldNumber( @field.FieldNumberAttr.Number ) ] />
                    <h1 public @field.SourceCodeType @(field.Name + "{get;set;}")=new @{ @field.SourceCodeType  } (); />
                }
            }
            <h1 } />
        }

        foreach (var service in interf.Services)
        {
            if (genType == GenType.Server || genType == GenType.All)
            {
                string serviceattr = "[ServiceInfo(Name=\"" + service.FullName + "\")]";
                <h1 @serviceattr />
                <h1 public partial class @(service.FullName + "Service") :IService />
                <h1 { />
                <h1 @("public static readonly UInt16 " + service.ServiceName + "_ServiceId=" + service.ServiceId.ToString() + ";") />

                <h1 public override UInt16 GetSid(){ return @(service.ServiceName + "_ServiceId") ; } />
                if (service.ReturnStruct.TargetFields.Count > 1)
                {
                    <h1 private @(service.ReturnStruct.Name + " Response")=new @(service.ReturnStruct.Name + "()") ; />
                }
                <h1 public override void Invoke(SerializationManager recManager, SerializationManager sendManager) />
                <h1 { />
                string s = service.ParameterStruct.Name + " request = recManager.Deserialize <" + service.ParameterStruct.Name + ">();";
                <h1 @s />
                string pars = string.Empty;
                string externstr = string.Empty;
                for (int pi = 0; pi < service.ParameterStruct.TargetFields.Count; pi++)
                {
                    var par = service.ParameterStruct.TargetFields[pi];
                    pars += "request." + par.Name;
                    externstr += par.SourceCodeType + " " + par.Name;
                    if (pi + 1 < service.ParameterStruct.TargetFields.Count)
                    {
                        pars += ",";
                        externstr += ",";
                    }

                }
                <h1 @(service.ServiceName + "(" + pars + ");") />

                if (service.ReturnStruct.TargetFields.Count > 1)
                {

                    <h1 sendManager.Serialize(Response,0); />
                }

                <h1 } />
                <h1 //public void @(service.ServiceName + "(" + externstr + ");") />
                <h1 } />
            }

        }
        if (genType == GenType.Client || genType == GenType.All)
        {
            foreach (var service in interf.Services)
            {
                string responseInfoattr = "[ResponseInfo(Name=\"" + service.FullName + "\",ServiceId=" + service.ServiceId.ToString() + ")]";
                <h1 @responseInfoattr />
            }
            <h1 public class @(interf.Name + "ClientImpl") />
            <h1 { />
            <h1 private EmbedXrpcObject Client=null; />
            <h1 public @(interf.Name + "ClientImpl(EmbedXrpcObject client)") />
            <h1 { Client=client;} />

            foreach (var service in interf.Services)
            {
                <h1 @("public static readonly UInt16 " + service.ServiceName + "_ServiceId=" + service.ServiceId.ToString() + ";") />
                string pars = string.Empty;
                for (int pi = 0; pi < service.ParameterStruct.TargetFields.Count; pi++)
                {
                    var par = service.ParameterStruct.TargetFields[pi];
                    pars += par.SourceCodeType + " " + par.Name;
                    if (pi + 1 < service.ParameterStruct.TargetFields.Count)
                    {
                        pars += ",";
                    }

                }
                <h1 public @(service.ReturnStruct.Name) @(service.ServiceName + "(") @(pars + ")") />
                <h1 { />
                <h1 @(service.ReturnStruct.Name) reqresp=new @(service.ReturnStruct.Name + "()") ; />
                <h1 lock(Client.ObjectMutex) />
                <h1 { />
                <h1 Client.ResponseMessageQueueHandle.Reset(); />
                <h1 @(service.ParameterStruct.Name + " request")=new @(service.ParameterStruct.Name + "();") />
                for (int pi = 0; pi < service.ParameterStruct.TargetFields.Count; pi++)
                {
                    var par = service.ParameterStruct.TargetFields[pi];
                    string setvalue = "request." + par.Name + "=" + par.Name + ";";
                    <h1 @setvalue />
                }
                string SerializationManager_Construction = "SerializationManager sm=new SerializationManager(Assembly.GetExecutingAssembly(),Client.IsEnableMataDataEncode,new List<byte>());";
                <h1 @SerializationManager_Construction />

                <h1 sm.Serialize(request,0); />

                var sendBytesString2 = "List<byte> sendBytes = new List<byte>();";
                <h1 @sendBytesString2 />

                string sid_temp = "(byte)(" + service.ServiceName + "_ServiceId&0xff)";
                <h1 sendBytes.Add( @sid_temp ); />

                sid_temp = "(byte)(" + service.ServiceName + "_ServiceId>>8&0xff)";
                <h1 sendBytes.Add( @sid_temp ); />

                sid_temp = "(byte)(Client.TimeOut>>0&0xff)";
                <h1 sendBytes.Add( @sid_temp ); />

                sid_temp = "(byte)(((Client.TimeOut>>8&0xff)&0x3F)|((byte)ReceiveType.Request)<<6)";
                <h1 sendBytes.Add( @sid_temp ); />

                <h1 sendBytes.AddRange(sm.Data); />

                string sendString = "if( Client.Send ( sendBytes.Count,0,sendBytes.ToArray() )==false)\n {\nreqresp.State=RequestResponseState.RequestState_Failed;\n goto exi;\n}\n";
                sendString += "else\n{\nreqresp.State=RequestResponseState.RequestState_Ok;\n}";
                <h1 @sendString />
                if (service.ReturnStruct.TargetFields.Count > 1)
                {
                    <h1 var waitstate=@("Client.Wait<"+service.ReturnStruct.Name+ ">(") @(service.ServiceName + "_ServiceId, out reqresp);") />
                    <h1 if(reqresp @("==null") ) />
                    <h1 { />
                    <h1 reqresp=new @(service.ReturnStruct.Name + "()") ; />
                    <h1 } />
                    <h1 reqresp.State=waitstate; />
                    <h1 goto exi; />
                }
                <h1 } />
                string exitstring = "exi:\nreturn reqresp;";
                <h1 @exitstring />
                <h1 } />
            }
            <h1 } />
        }
    }
}
<h1 } />
