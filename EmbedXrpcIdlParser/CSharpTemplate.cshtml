@using  RazorLight
@using System
@using System.Collections.Generic 
@using EmbedXrpcIdlParser
@inherits TemplatePage<IdlInfo>
@{
    IdlInfo idlInfo = (IdlInfo)this.Model;
    DisableEncoding = true;
}
<h1 using EmbedXrpc; />
<h1 using System; />
<h1 // auto code gen ! DO NOT modify this file! create time @DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");/>
<h1 namespace @idlInfo.GenerationOptionParameterAttribute.OutPutFileName />
<h1 { />
@{
    var ens = idlInfo.TargetEnums;
    foreach (var enu in ens)
    {
        <h1 public enum @enu.Name />
        <h1 { />
        foreach (var ev in enu.TargetEnumValues)
        {

            <h1 @(ev.Description + "=") @(ev.Value + ",") />
        }

        <h1 } />
    }

    var structs = idlInfo.TargetStructs;
    foreach (var stru in structs)
    {
        <h1 public class @stru.Name />
        <h1 { />
        foreach (var field in stru.TargetFields)
        {
            if (field.IsArray == true)
            {
                string v = "[ArrayProperty(LenFieldName = \"" + field.MaxCountAttribute.LenFieldName + "\")]";

                <h1 @v />
            }
            <h1 public @field.IdlType @(field.Name + "{get;set;}") />
        }
        <h1 } />
    }

    foreach (var del in idlInfo.TargetDelegates)
    {

        TargetStruct stru = new TargetStruct();
        stru.Name = del.MethodName + "Struct";
        stru.TargetFields = del.TargetFields;
        <h1 public class @stru.Name />
        <h1 { />
        foreach (var field in stru.TargetFields)
        {
            if (field.IsArray == true)
            {
                string v = "[ArrayProperty(LenFieldName = \"" + field.MaxCountAttribute.LenFieldName + "\")]";

                <h1 @v />
            }
            <h1 public @field.IdlType @(field.Name + "{get;set;}") />
        }
        <h1 } />
        string delattr = "[DelegateInfo(Name=\"" + del.MethodName + "\")]";
        <h1 @delattr />
        <h1 public partial class @(del.MethodName + "ClientImpl") :IDelegate />
        <h1 { />
        <h1 @("public static readonly UInt32 " + del.MethodName + "_ServiceId=" + del.ServiceId.ToString() + ";") />
        <h1 public override UInt32 GetSid(){ return @(del.MethodName + "_ServiceId") ; } />
        <h1 public override void Invoke(SerializationManager recManager) />
        <h1 { />
        string s = del.MethodName + "Struct request = Serialization.Deserialize <" + del.MethodName + "Struct>(recManager);";
        <h1 @s />
        string pars = string.Empty;
        string externstr = string.Empty;
        for (int pi = 0; pi < del.TargetFields.Count; pi++)
        {
            var par = del.TargetFields[pi];
            pars += "request." + par.Name;
            externstr += par.IdlType + " " + par.Name;
            if (pi + 1 < del.TargetFields.Count)
            {
                pars += ",";
                externstr += ",";
            }

        }
        <h1 @(del.MethodName + "(" + pars + ");") />
        <h1 } />
        <h1 //public void @(del.MethodName + "(" + externstr + ");") />
        <h1 } />

        <h1 public class @(del.MethodName + "Delegate") />
        <h1 { />
        <h1 private EmbedXrpc.Server Server; />
        <h1 public @(del.MethodName + "Delegate(EmbedXrpc.Server server)") />
        <h1 { Server=server; } />
        <h1 @("public static readonly UInt32 " + del.MethodName + "_ServiceId=" + del.ServiceId.ToString() + ";") />

        pars = string.Empty;
        for (int pi = 0; pi < del.TargetFields.Count; pi++)
        {
            var par = del.TargetFields[pi];
            pars += par.IdlType + " " + par.Name;
            if (pi + 1 < del.TargetFields.Count)
            {
                pars += ",";
            }

        }
        <h1 public void @(del.MethodName + "(") @(pars + ")") />
        <h1 { />
        <h1 @(del.MethodName + "Struct request")=new @(del.MethodName + "Struct();") />
        for (int pi = 0; pi < del.TargetFields.Count; pi++)
        {
            var par = del.TargetFields[pi];
            string setvalue = "request." + par.Name + "=" + par.Name + ";";
            <h1 @setvalue />
        }
        <h1 SerializationManager sm=new SerializationManager(); />
        <h1 Serialization.Serialize(sm, request); />
        <h1 Server.Send ( @(del.MethodName + "_ServiceId") , sm.Index,sm.Data.ToArray() ); />
        <h1 } />
        <h1 } />
    }

    var interfaces = idlInfo.TargetInterfaces;

    foreach (var interf in interfaces)
    {
        foreach (var service in interf.Services)
        {
            TargetStruct stru = new TargetStruct();
            stru.Name = service.ServiceName + "_Request";
            stru.TargetFields = service.TargetFields;
            <h1 public class @stru.Name />
            <h1 { />
            foreach (var field in stru.TargetFields)
            {
                if (field.IsArray == true)
                {
                    string v = "[ArrayProperty(LenFieldName = \"" + field.MaxCountAttribute.LenFieldName + "\")]";

                    <h1 @v />
                }
                <h1 public @field.IdlType @(field.Name + "{get;set;}") />
            }
            <h1 } />

            if (service.ReturnValue != null)
            {
                TargetStruct returnstru = new TargetStruct();
                returnstru.Name = service.ServiceName + "_Response";
                TargetField returnField = new TargetField() { IdlType = service.ReturnValue.IdlType, IsArray = false, Name = "ReturnValue" };
                TargetField ResponseStateField = new TargetField() { IdlType = "ResponseState", IsArray = false, Name = "State" };
                returnstru.TargetFields = new List<TargetField>() { ResponseStateField, returnField };
                <h1 public class @returnstru.Name />
                <h1 { />
                foreach (var field in returnstru.TargetFields)
                {
                    if (field.IsArray == true)
                    {
                        string v = "[ArrayProperty(LenFieldName = \"" + field.MaxCountAttribute.LenFieldName + "\")]";

                        <h1 @v />
                    }
                    <h1 public @field.IdlType @(field.Name + "{get;set;}") />
                }
                <h1 } />
            }

        }

        foreach (var service in interf.Services)
        {
            string serviceattr = "[ServiceInfo(Name=\"" + service.ServiceName + "\")]";
            <h1 @serviceattr />
            <h1 public partial class @(service.ServiceName + "Service") :IService />
            <h1 { />
            <h1 @("public static readonly UInt32 " + service.ServiceName + "_ServiceId=" + service.ServiceId.ToString() + ";") />

            <h1 public override UInt32 GetSid(){ return @(service.ServiceName + "_ServiceId") ; } />
            if (service.ReturnValue != null)
            {
            <h1 private @(service.ServiceName + "_Response Response") = new  @(service.ServiceName + "_Response()");/>
            }
            <h1 public override void Invoke(SerializationManager recManager, SerializationManager sendManager) />
            <h1 { />

            string s = service.ServiceName + "_Request request = Serialization.Deserialize <" + service.ServiceName + "_Request>(recManager);";
            <h1 @s />
            string pars = string.Empty;
            string externstr = string.Empty;
            for (int pi = 0; pi < service.TargetFields.Count; pi++)
            {
                var par = service.TargetFields[pi];
                pars += "request." + par.Name;
                externstr += par.IdlType + " " + par.Name;
                if (pi + 1 < service.TargetFields.Count)
                {
                    pars += ",";
                    externstr += ",";
                }

            }
            <h1 @(service.ServiceName + "(" + pars + ");") />

            if (service.ReturnValue != null)
            {
                <h1 Serialization.Serialize(sendManager, Response); />
            }

            <h1 } />
            <h1 //public void @(service.ServiceName + "(" + externstr + ");") />
            <h1 } />
        }
        foreach (var service in interf.Services)
        {
            string responseInfoattr = "[ResponseInfo(Name=\"" + service.ServiceName + "\",ServiceId="+service.ServiceId.ToString()+")]";
            <h1 @responseInfoattr />
        }

        <h1 public class @(interf.Name + "ClientImpl") />
        <h1 { />
        <h1 private EmbedXrpc.Client Client=null; />
        <h1 public @(interf.Name + "ClientImpl(EmbedXrpc.Client client)") />
        <h1 { Client=client;} />

        foreach (var service in interf.Services)
        {
            <h1 @("public static readonly UInt32 " + service.ServiceName + "_ServiceId=" + service.ServiceId.ToString() + ";") />
            string pars = string.Empty;
            for (int pi = 0; pi < service.TargetFields.Count; pi++)
            {
                var par = service.TargetFields[pi];
                pars += par.IdlType + " " + par.Name;
                if (pi + 1 < service.TargetFields.Count)
                {
                    pars += ",";
                }

            }
            if (service.ReturnValue != null)
            {
                <h1 public @(service.ServiceName + "_Response") @(service.ServiceName + "(") @(pars + ")") />
            }
            else
            {
                <h1 public void @(service.ServiceName + "(") @(pars + ")") />
            }
            <h1 { />
            <h1 @(service.ServiceName + "_Request request")=new @(service.ServiceName + "_Request ();") />
            for (int pi = 0; pi < service.TargetFields.Count; pi++)
            {
                var par = service.TargetFields[pi];
                string setvalue = "request." + par.Name + "=" + par.Name + ";";
                <h1 @setvalue />
            }
            <h1 SerializationManager sm=new SerializationManager(); />
            <h1 Serialization.Serialize(sm, request); />
            <h1 Client.Send ( @(service.ServiceName + "_ServiceId") , sm.Index,sm.Data.ToArray() ); />
            if (service.ReturnValue != null)
            {
                <h1 @(service.ServiceName + "_Response response;") />
                <h1 ResponseState result=@("Client.Wait<"+service.ServiceName+ "_Response>(") @(service.ServiceName + "_ServiceId, out response);") />
                <h1 response.State=result; />
                <h1 return response; />
            }
            <h1 } />
        }
        <h1 } />
    }
}
<h1 } />
